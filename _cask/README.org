* Cask

[[https://github.com/cask/cask/actions][https://github.com/cask/cask/actions/workflows/test.yml/badge.svg]]
[[https://melpa.org/#/cask][https://melpa.org/packages/cask-badge.svg]]
[[https://stable.melpa.org/#/cask][https://stable.melpa.org/packages/cask-badge.svg]]
#+HTML: <img src="cask_small.png" align="right">

Cask can be likened to =venv= or =maven= for Emacs Lisp development, although, as with all things emacs, is decidedly less sophisticated (but no less arcane).

Cask simplifies sandboxing that more expert elisp developers accomplish directly with emacs's built-in =-Q=, =--batch=, and =--eval= switches.  Within the sandbox, Cask provisions dependencies via a user-defined "Cask" file analogous to =requirements-dev.txt= or =pom.xml=.

** Installation

#+begin_src shell
  git clone https://github.com/cask/cask
  cd cask
  make install
#+end_src

** Not-so-quick start

#+begin_src shell
  cask init --dev
#+end_src

With just this baseline "Cask" file, you can run most of the commands described in [[http://cask.readthedocs.io]].

** Typical Makefile Usage

Egregious boilerplate follows:

#+begin_src makefile :tangle README.makefile
export EMACS ?= $(shell which emacs)
CASK_DIR := $(shell cask package-directory)

$(CASK_DIR): Cask
	cask install
	@touch $(CASK_DIR)

.PHONY: cask
cask: $(CASK_DIR)

.PHONY: compile
compile: cask
	! (cask eval "(let ((byte-compile-error-on-warn t)) \
	                 (cask-cli/build))" 2>&1 \
	   | egrep -a "(Warning|Error):") ; \
	  (ret=$$? ; cask clean-elc && exit $$ret)

.PHONY: test
test: compile
	cask exec ert-runner help
#+end_src

** Typical CI Usage

Cask, in conjunction with [[https://github.com/purcell/setup-emacs][setup-emacs]], is commonly used in Github Actions.  Egregious boilerplate follows:

#+begin_src yaml :tangle .github/workflows/readme.yml
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        emacs-version:
          - 26.3
          - 27.2
    steps:
      - uses: actions/checkout@v2
      - uses: purcell/setup-emacs@master
        with:
          version: ${{ matrix.emacs-version }}
      - uses: actions/cache@v2
        id: cache-cask-packages
        with:
          path: .cask
          key: cache-cask-packages-000
      - uses: actions/cache@v2
        id: cache-cask-executable
        with:
          path: ~/.cask
          key: cache-cask-executable-000
      - uses: conao3/setup-cask@master
        if: steps.cache-cask-executable.outputs.cache-hit != 'true'
        with:
          version: snapshot
      - run: echo "$HOME/.cask/bin" >> $GITHUB_PATH
#+end_src

** Frequently Asked Questions

+ Why must I replicate dependencies in the Cask file? :: You mustn't, but probably more than half of Cask deployments in the wild needlessly do.  =cask list= automatically shows your package's dependencies if you specify them /pro forma/ in a =Package-Requires= header.  The oft-confused [[https://cask.readthedocs.io/en/latest/guide/dsl.html#el.function.development][development stanza]] is analogous to =requirements-dev.txt=.  Only packages required by your testing apparatus, e.g., =ert-runner=, should be added there.
+ Doesn't Cask make things more complicated? :: In many ways, yes.  Some overlays succeed in decluttering the underlying technology.  A good example of this is LaTeX over pure TeX.  On the opposite end of the helpfulness spectrum, some overlays require you to learn a metalanguage that is only slightly less complex but inherently more opaque than the underlying.  Saltstack and Terraform (really the whole enterprise DevOps space) come to mind.  Cask is somewhere in the middle.
+ I perused the docs, and I still don't get it? :: The docs were written at a time when Cask aspired to be both a developer tool *and* an end-user tool for managing emacs packages.  The latter role is no longer advised (and the docs should be re-written).
+ Is Cask a vassal of MELPA? :: Yes, Cask's early development history is intertwined with that of MELPA's [[https://github.com/melpa/package-build/blob/master/package-build.el][package-build]].  Cask employs that module for all packaging tasks including dependency provisioning.
